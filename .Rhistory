install.packages("lsa")
#wlaczene bibliotek
library(tm)
library(stringr)
#zmiana katalogu roboczego
workDir <- "C:\\PW\\PJN\\"
setwd(workDir)
#definicja katalogow projektu
inputDir <- ".\\data"
outputDir <- ".\\results"
scriptsDir <- ".\\scripts"
workspaceDir <- ".\\workspaces"
#utworzenie katalogu wyjsciowego
dir.create(outputDir, showWarnings = FALSE)
#utworzenie korpusu dokumentow
corpusDir <- paste(inputDir, "\\", "Literatura - streszczenia - przetworzone", sep = "")
corpus <- VCorpus(
DirSource(
corpusDir,
pattern = "*.txt",
encoding = "UTF-8"
),
readerControl = list(
language = "pl_PL"
)
)
#usuniecie rozszerzen z nazw dokumentow
cutExtensions <- function(document){
meta(document, "id") <- gsub(pattern = "\\.txt$", "", meta(document, "id"))
return(document)
}
corpus <- tm_map(corpus, cutExtensions)
#utworzenie macirzy czestosci
tdmTfAll <- TermDocumentMatrix(corpus)
dtmTfAll <- DocumentTermMatrix(corpus)
tdmTfidfAll <- TermDocumentMatrix(
corpus,
control = list(
weighting = weightTfIdf
)
)
tdmBinAll <- TermDocumentMatrix(
corpus,
control = list(
weighting = weightBin
)
)
tdmTfBounds <- TermDocumentMatrix(
corpus,
control = list(
bounds = list(
global = c(2,16)
)
)
)
tdmTfidfBounds <- TermDocumentMatrix(
corpus,
control = list(
weighting = weightTfIdf,
bounds = list(
global = c(2,16)
)
)
)
dtmTfidfBoundsMatrix <- TermDocumentMatrix(
corpus,
control = list(
weighting = weightTfIdf,
bounds = list(
global = c(2,16)
)
)
)
tdmTfAllMatrix <- as.matrix(tdmTfAll)
dtmTfAllMatrix <- as.matrix(dtmTfAll)
tdmTfidfAllMatrix <- as.matrix(tdmTfidfAll)
tdmBinAllMatrix <- as.matrix(tdmBinAll)
tdmTfBoundsMatrix <- as.matrix(tdmTfBounds)
tdmTfidfBoundsMatrix <- as.matrix(tdmTfidfBounds)
dtmTfidfBoundsMatrix <- as.matrix(dtmTfidfBoundsMatrix)
#export macierzy do pliku .csv
#matrixFile <- paste(
#  outputDir,
#  "\\",
#  "tdmTfidfBounds.csv",
# sep = ""
#)
#write.table(tdmTfidfBoundsMatrix, file = matrixFile, sep = ";", dec = ",", col.names = NA)
#skalowanie wielowymiarowe
d <- dist(dtmTfidfBoundsMatrix)
fit <- cmdscale(d,eig=TRUE, k=2)
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS", type="n")
text(x, y, labels = row.names(dtmTfidfBoundsMatrix), cex=.7)
#wlaczene bibliotek
library(tm)
library(hunspell)
library(stringr)
#zmiana katalogu roboczego
workDir <- "C:\\PW\\PJN\\"
setwd(workDir)
#definicja katalogow projektu
inputDir <- ".\\data"
outputDir <- ".\\results"
scriptsDir <- ".\\scripts"
#utworzenie katalogu wyjsciowego
dir.create(outputDir, showWarnings = FALSE)
#utworzenie korpusu dokumentow
corpusDir <- paste(inputDir, "\\", "Literatura - streszczenia - oryginal", sep = "")
corpus <- VCorpus(
DirSource(
corpusDir,
pattern = "*.txt",
encoding = "UTF-8"
),
readerControl = list(
language = "pl_PL"
)
)
#usuniecie z teskstow podzialu na akapity
pusteParagraphs <- content_transformer(function(text, char) paste(text, collapse = char))
corpus <- tm_map(corpus, " ")
#wstepne przetwarzanie
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, content_transformer(tolower))
stoplistFile <- paste(
inputDir,
"\\",
"stopwords_pl.txt",
sep = ""
)
stoplist <- readLines(
stoplistFile,
encoding = "UTF-8"
)
corpus <- tm_map(corpus, removeWords, stoplist)
corpus <- tm_map(corpus, stripWhitespace)
remove_char <- content_transformer(
function(x, pattern, replacement)
gsub(pattern, replacement, x)
)
#usuniecie "m dash" i 3/4 z tekstow
corpus <- tm_map(corpus, remove_char, intToUtf8(8722), "")
corpus <- tm_map(corpus, remove_char, intToUtf8(190), "")
#lematyzacja - sprowadzenie do formy podstawowej
polish <- dictionary(lang = "pl_PL")
lemmatize <- function(text) {
simple_text <- str_trim(as.character(text[1]))
parsed_text <- strsplit(simple_text, split = " ")
new_text_vec <- hunspell_stem(parsed_text[[1]], dict = polish)
for (i in 1:length(new_text_vec)){
if (length(new_text_vec[[i]]) == 0) new_text_vec[i] <- parsed_text[[1]][i]
if (length(new_text_vec[[i]]) > 1) new_text_vec[i] <- new_text_vec[[i]][1]
}
new_text <- paste(new_text_vec, collapse = " ")
return(new_text)
}
corpus <- tm_map(corpus, content_transformer(lemmatize))
#usuniecie rozszerzen z nazw dokumentow
cut_extensions <- function(document){
meta(document, "id") <- gsub(pattern = "\\.txt$", "", meta(document, "id"))
return(document)
}
corpus <- tm_map(corpus, cut_extensions)
#export korpusu przetworzonego do plik?w tekstowych
preprocessed_dir <- paste(
outputDir,
"\\",
"Literatura - streszczenia - przetworzone",
sep = ""
)
dir.create(preprocessed_dir, showWarnings = FALSE)
writeCorpus(corpus, path = preprocessed_dir)
writeLines(as.character(corpus[[1]]))
setwd(workDir)
#włączenie bibliotek
#zmiana katalogu roboczego
workDir <- "C:\\PW\\PJN\\"
setwd(workDir)
#lokalizacja katalogu ze skryptami
scriptsDir <- ".\\scripts"
#załadowanie skryptu
sourceFile <- paste(
scriptsDir,
"\\",
"frequency_matrix.R",
sep = ""
)
source(sourceFile)
#analiza głównych składowych
pca <- prcomp(dtmTfidfBounds)
x <- pca$x[,1]
y <- pca$x[,2]
#przygotowanie legendy
legend <- paste(
paste("d", 1:length(rownames(dtmTfidfBoundsMatrix)),sep = ""),
rownames(dtmTfidfBoundsMatrix),
sep = "<-"
)
#wykres dokumentów w przestrzeni dwuwymiarowej
plot(
x,
y,
#xlim = c(-0.5,-0.2),
#ylim = c(-0.2,0.1),
xlab="Współrzędna syntetyczna 1",
ylab="Współrzędna syntetyczna 2",
main="Analiza głównych składowych",
col = "orange"
)
text(
x,
y,
labels = paste("d", 1:length(rownames(dtmTfidfBoundsMatrix)),sep = ""),
pos = 3,
col = "orange"
)
legend("bottom", legend, cex=.5, text.col = "orange")
#eksport wykresu do pliku .png
plotFile <- paste(
outputDir,
"\\",
"pca.png",
sep = ""
)
png(file = plotFile)
plot(
x,
y,
xlab="Współrzędna syntetyczna 1",
ylab="Współrzędna syntetyczna 2",
main="Analiza głównych składowych",
col = "orange"
)
text(
x,
y,
labels = paste("d", 1:length(rownames(dtmTfidfBoundsMatrix)),sep = ""),
pos = 3,
col = "orange"
)
legend("bottom", legend, cex=.65, text.col = "orange")
dev.off()
#włączenie bibliotek
library(proxy)
#zmiana katalogu roboczego
workDir <- "C:\\PW\\PJN\\"
setwd(workDir)
#lokalizacja katalogu ze skryptami
scriptsDir <- ".\\scripts"
#załadowanie skryptu
sourceFile <- paste(
scriptsDir,
"\\",
"frequency_matrix.R",
sep = ""
)
source(sourceFile)
#skalowanie wielowymiarowe
distCos <- dist(dtmTfidfBoundsMatrix, method = "cosine")
mds <- cmdscale(distCos,eig=TRUE, k=2)
x <- mds$points[,1]
y <- mds$points[,2]
#przygotowanie legendy
legend <- paste(
paste("d", 1:length(rownames(dtmTfidfBoundsMatrix)),sep = ""),
rownames(dtmTfidfBoundsMatrix),
sep = "<-"
)
#wykres dokumentów w przestrzeni dwuwymiarowej
plot(
x,
y,
#xlim = c(-0.5,-0.2),
#ylim = c(-0.2,0.1),
xlab="Współrzędna syntetyczna 1",
ylab="Współrzędna syntetyczna 2",
main="Skalowanie wielowymiarowe",
col = "orange"
)
text(
x,
y,
labels = paste("d", 1:length(rownames(dtmTfidfBoundsMatrix)),sep = ""),
pos = 3,
col = "orange"
)
legend("bottom", legend, cex=.5, text.col = "orange")
#eksport wykresu do pliku .png
plotFile <- paste(
outputDir,
"\\",
"mds.png",
sep = ""
)
png(file = plotFile)
plot(
x,
y,
xlab="Współrzędna syntetyczna 1",
ylab="Współrzędna syntetyczna 2",
main="Skalowanie wielowymiarowe",
col = "orange"
)
text(
x,
y,
labels = paste("d", 1:length(rownames(dtmTfidfBoundsMatrix)),sep = ""),
pos = 3,
col = "orange"
)
legend("bottom", legend, cex=.65, text.col = "orange")
dev.off()
#włączenie bibliotek
library(lsa)
#zmiana katalogu roboczego
workDir <- "C:\\PW\\PJN\\"
setwd(workDir)
#lokalizacja katalogu ze skryptami
scriptsDir <- ".\\scripts"
#załadowanie skryptu
sourceFile <- paste(
scriptsDir,
"\\",
"frequency_matrix.R",
sep = ""
)
source(sourceFile)
#analiza ukrytych wymiarów semantycznych (dekompozycja wg wartości osobliwych)
lsa <- lsa(tdmTfidfBoundsMatrix)
lsa$tk #odpowiednik macierzy U, współrzędne wyrazów
lsa$dk #odpowiednik macierzy V, współrzędne dokumentów
lsa$sk #odpowiednik macierzy D, znaczenie składowych
#Tu skończyliśmy
#przygotowanie współrzędnych do wykresu
x <- pca$x[,1]
y <- pca$x[,2]
#przygotowanie legendy
legend <- paste(
paste("d", 1:length(rownames(dtmTfidfBoundsMatrix)),sep = ""),
rownames(dtmTfidfBoundsMatrix),
sep = "<-"
)
#wykres dokumentów w przestrzeni dwuwymiarowej
plot(
x,
y,
#xlim = c(-0.5,-0.2),
#ylim = c(-0.2,0.1),
xlab="Współrzędna syntetyczna 1",
ylab="Współrzędna syntetyczna 2",
main="Analiza głównych składowych",
col = "orange"
)
text(
x,
y,
labels = paste("d", 1:length(rownames(dtmTfidfBoundsMatrix)),sep = ""),
pos = 3,
col = "orange"
)
legend("bottom", legend, cex=.5, text.col = "orange")
#eksport wykresu do pliku .png
plotFile <- paste(
outputDir,
"\\",
"pca.png",
sep = ""
)
png(file = plotFile)
plot(
x,
y,
xlab="Współrzędna syntetyczna 1",
ylab="Współrzędna syntetyczna 2",
main="Analiza głównych składowych",
col = "orange"
)
text(
x,
y,
labels = paste("d", 1:length(rownames(dtmTfidfBoundsMatrix)),sep = ""),
pos = 3,
col = "orange"
)
legend("bottom", legend, cex=.65, text.col = "orange")
dev.off()
#włączenie bibliotek
#zmiana katalogu roboczego
workDir <- "C:\\PW\\PJN\\"
setwd(workDir)
#lokalizacja katalogu ze skryptami
scriptsDir <- ".\\scripts"
#załadowanie skryptu
sourceFile <- paste(
scriptsDir,
"\\",
"frequency_matrix.R",
sep = ""
)
source(sourceFile)
#analiza głównych składowych
pca <- prcomp(dtmTfidfBounds)
x <- pca$x[,1]
y <- pca$x[,2]
#przygotowanie legendy
legend <- paste(
paste("d", 1:length(rownames(dtmTfidfBoundsMatrix)),sep = ""),
rownames(dtmTfidfBoundsMatrix),
sep = "<-"
)
#wykres dokumentów w przestrzeni dwuwymiarowej
plot(
x,
y,
#xlim = c(-0.5,-0.2),
#ylim = c(-0.2,0.1),
xlab="Współrzędna syntetyczna 1",
ylab="Współrzędna syntetyczna 2",
main="Analiza głównych składowych",
col = "orange"
)
text(
x,
y,
labels = paste("d", 1:length(rownames(dtmTfidfBoundsMatrix)),sep = ""),
pos = 3,
col = "orange"
)
legend("bottom", legend, cex=.5, text.col = "orange")
#eksport wykresu do pliku .png
plotFile <- paste(
outputDir,
"\\",
"pca.png",
sep = ""
)
png(file = plotFile)
plot(
x,
y,
xlab="Współrzędna syntetyczna 1",
ylab="Współrzędna syntetyczna 2",
main="Analiza głównych składowych",
col = "orange"
)
text(
x,
y,
labels = paste("d", 1:length(rownames(dtmTfidfBoundsMatrix)),sep = ""),
pos = 3,
col = "orange"
)
legend("bottom", legend, cex=.65, text.col = "orange")
dev.off()
